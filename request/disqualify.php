<?php/*        Copyright (C) 2008-2009 Gilles Dubuc (www.kouiskas.com - gilles@dubuc.fr)               Disqualifies an entry currently entered in a competition*/require_once(dirname(__FILE__).'/../entities/alert.php');require_once(dirname(__FILE__).'/../entities/alertinstance.php');require_once(dirname(__FILE__).'/../entities/alertvariable.php');require_once(dirname(__FILE__).'/../entities/community.php');require_once(dirname(__FILE__).'/../entities/communitymoderator.php');require_once(dirname(__FILE__).'/../entities/competition.php');require_once(dirname(__FILE__).'/../entities/entry.php');require_once(dirname(__FILE__).'/../entities/entrylist.php');require_once(dirname(__FILE__).'/../entities/picture.php');require_once(dirname(__FILE__).'/../entities/user.php');require_once(dirname(__FILE__).'/../utilities/persistenttoken.php');require_once(dirname(__FILE__).'/../utilities/token.php');require_once(dirname(__FILE__).'/../constants.php');$user = User::getSessionUser();$entry = null;try {	if (isset($_REQUEST['eid'])) {		$entry = Entry::get($_REQUEST['eid']);	} elseif (isset($_REQUEST['token'])) {		$token = Token::get($_REQUEST['token']);		$exploded = explode('-', $token);		if (count($exploded) == 2) {			$token_uid = $exploded[0];			$eid = $exploded[1];			if ($token_uid == $user->getUid() || $user->getUid() == $GOOGLE_UID)				$entry = Entry::get($eid);		}	} elseif (isset($_REQUEST['persistenttoken'])) {		$token = PersistentToken::get($_REQUEST['persistenttoken']);		$exploded = explode('-', $token);		if (count($exploded) == 2) {			$token_uid = $exploded[0];			$eid = $exploded[1];			if ($token_uid == $user->getUid() || $user->getUid() == $GOOGLE_UID)				$entry = Entry::get($eid);		}	}} catch (EntryException $e) {} catch (TokenException $f) {} catch (PersistentTokenException $g) {}if ($entry !== null) {	$eid = $entry->getEid();	try {		$entry = Entry::get($eid);		$competition = Competition::get($entry->getCid());		$community = Community::get($competition->getXid());						try {			$moderator = CommunityModerator::get($competition->getXid(), $user->getUid());			$ismoderator = true;		} catch (CommunityModeratorException $e) {			$ismoderator = false;		}				// Only disqualify is the current user has the right to do so		if ($ismoderator) {			$entry->setStatus($ENTRY_STATUS['DISQUALIFIED']);						$author = User::get($entry->getUid());						$alert = new Alert($ALERT_TEMPLATE_ID['DISQUALIFIED']);			$aid = $alert->getAid();			$alert_variable = new AlertVariable($aid, 'tid', $competition->getTid());									$token = new Token($author->getUid().'-'.$eid);			$link = $PAGE['ENTRY'].'?lid='.$author->getLid().'&home=true#token='.$token->getHash();						$alert_variable = new AlertVariable($aid, 'href', $link);						if ($competition->getStatus() == $COMPETITION_STATUS['CLOSED']) {				$entry->setRank(null);				$competition->calculateRankings(true);			}						if ($author->getStatus() == $USER_STATUS['ACTIVE']) {				$alert_instance = new AlertInstance($aid, $author->getUid(), $ALERT_INSTANCE_STATUS['ASYNC']);			}		}				if ($competition->getStatus() == $COMPETITION_STATUS['VOTING']) {			$token = new Token($user->getUid().'-'.$eid);			header('Location: '.$PAGE['ENTRY'].'?lid='.$user->getLid().'#token='.$token->getHash());		} else header('Location: '.$PAGE['ENTRY'].'?lid='.$user->getLid().'#eid='.$eid);	} catch (Exception $e) {		header('Location: '.$PAGE['ENTRY'].'?lid='.$user->getLid().'#eid='.$eid);	}}?>