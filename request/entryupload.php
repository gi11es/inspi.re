<?php/*        Copyright (C) 2008-2009 Gilles Dubuc (www.kouiskas.com - gilles@dubuc.fr)               Enters a picture into a competition*/require_once(dirname(__FILE__).'/../entities/competition.php');require_once(dirname(__FILE__).'/../entities/entry.php');require_once(dirname(__FILE__).'/../entities/entrylist.php');require_once(dirname(__FILE__).'/../entities/picture.php');require_once(dirname(__FILE__).'/../entities/pointsvalue.php');require_once(dirname(__FILE__).'/../entities/user.php');require_once(dirname(__FILE__).'/../entities/userlevellist.php');require_once(dirname(__FILE__).'/../utilities/log.php');require_once(dirname(__FILE__).'/../utilities/persistenttoken.php');require_once(dirname(__FILE__).'/../constants.php');$picture_sizes = array();$picture_sizes['status'] = 1;if (isset($_FILES['Filedata']) && isset($_FILES['Filedata']['tmp_name']) && isset($_REQUEST['cid']) && isset($_REQUEST['persistenttoken'])) {	$uid = PersistentToken::get($_REQUEST['persistenttoken']);	try {		$user = User::get($uid);	} catch (UserException $e) {		Log::error('Picture', 'User exception '.print_r($e, true));		header('Status: 403 Forbidden'); 		exit(0);	}		$levels = UserLevelList::getByUid($user->getUid());	$ispremium = in_array($USER_LEVEL['PREMIUM'], $levels);	$artworkcount = count(EntryList::getByUidAndStatus($user->getUid(), $ENTRY_STATUS['POSTED']));		if ($artworkcount > 70 && !$ispremium) {		Log::error('Picture', 'Premium shite');		header('Status: 403 Forbidden'); 		exit(0);	}		$cid = $_REQUEST['cid'];	$competition = Competition::get($cid);		if ($competition->getStatus() == $COMPETITION_STATUS['OPEN']) {			$picture = new Picture($_FILES['Filedata']['tmp_name']);			if (!$picture->invalid) {			switch ($user->getStatus()) {				case $USER_STATUS['UNREGISTERED']:					$status = $ENTRY_STATUS['ANONYMOUS'];					break;				case $USER_STATUS['BANNED']:					$status = $ENTRY_STATUS['BANNED'];					break;				default:					$status = $ENTRY_STATUS['POSTED'];			}			$entrylist = EntryList::getByUidAndCidAndStatus($uid, $cid, $status);			if (empty($entrylist))				$entrylist = EntryList::getByUidAndCidAndStatus($uid, $cid, $ENTRY_STATUS['DISQUALIFIED']);							$pointsvalue = PointsValue::get($POINTS_VALUE_ID['ENTRY_POSTING']);			$points_post_entry = $pointsvalue->getValue();						if (empty($entrylist)) try {				$user->givePoints($points_post_entry);			} catch (UserException $e) {				Log::error('Picture', 'User exception 2'.print_r($e, true));				header('Status: 403 Forbidden'); 				exit(0);			}						// We delete any entry that was there before			if (!empty($entrylist)) foreach ($entrylist as $eid) {				try {					$entry = Entry::get($eid);					$entry->delete();				} catch (EntryException $e) {}			}						$entry = new Entry($uid, $cid, $picture->getPid(), $status, -$points_post_entry);									Log::xmpp('GENERAL_ACTIVITY', '<profile_picture uid="'.$uid.'" size="tiny"/><div class="real_time_update_text"><translate id="JABBER_UPLOAD"><user_name uid="'.$uid.'"/> uploaded an entry for the <theme_title href="'.$PAGE['ENTER'].'?cid='.$competition->getCid().'" tid="'.$competition->getTid().'"/> competition of the <community_name xid="'.$competition->getXid().'" link="true"/> community</translate></div>');						try {				$picture_sizes = array();				$picture_sizes['big'] = $picture->getRealThumbnail($PICTURE_SIZE['BIG']);				$picture_sizes['huge'] = $picture->getRealThumbnail($PICTURE_SIZE['HUGE']);				$picture_sizes['status'] = 2;			} catch (PictureException $e) {				Log::error('Picture', 'Couldn\'t get real thumbnails '.print_r($e, true));				$entry->delete();				header('Status: 403 Forbidden'); 				exit(0);			}		} else Log::error('Picture', 'Invalid picture :(');	}}if ($picture_sizes['status'] == 1) Log::error('Picture', 'Shitty picture status');echo json_encode($picture_sizes);?>